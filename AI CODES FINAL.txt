TSP:
import sys

def all_visited(visited):
    return all(visited)

def tsp(visited, cost, current, path, n):
    global min_cost, ans
    if(all_visited(visited)):
        if (cost+graph[current][0]<min_cost):
            min_cost=cost+graph[current][0]
            ans=path+[0]
        return
    for i in range(n):
        if not visited[i] and i!=current:
            visited[i]=True
            tsp(visited,cost+graph[current][i],i,path+[i], n)
            visited[i]=False

if __name__=="__main__":
    print("Enter Total No of Vertices:")
    n=int(input())
    graph=[]

    for i in range (n):
        row=[]
        for j in range(n):
            if(i!=j):
                print(f"Enter the Distance of {i} to {j}")
                dist=int(input())
                row.append(dist)
            else:
                row.append(0)
        graph.append(row)


    for i in range(n):
        for j in range(n):
            print(graph[i][j], end="\t")
        print()
    
    path = []  # For storing the shortest path
    visited = [False] * n  # Initializing visited array with all False values
    min_cost = sys.maxsize
    visited[0] = True  # Marking the first node as visited

    tsp(visited, 0, 0, [0], n)
    print("Shortest Path:", ans)
    print("Cost:", min_cost)
 
output:
Enter Total No of Vertices:
4
Enter the Distance of 0 to 1
10
Enter the Distance of 0 to 2
15
Enter the Distance of 0 to 3
20
Enter the Distance of 1 to 0
10
Enter the Distance of 1 to 2
35
Enter the Distance of 1 to 3
25
Enter the Distance of 2 to 0
15
Enter the Distance of 2 to 1
35
Enter the Distance of 2 to 3
30
Enter the Distance of 3 to 0
20
Enter the Distance of 3 to 1
25
Enter the Distance of 3 to 2
30
0       10      15      20
10      0       35      25
15      35      0       30
20      25      30      0
Shortest Path: [0, 1, 3, 2, 0]
Cost: 80



***************************************************************
TOWER OF HANOI:
def tower_of_hanoi(n,A,B,C):
    if(n==1):
        print(f"Move Disk {n} from {A} to {C}")
        return
    tower_of_hanoi(n-1,A,C,B)
    print(f"Move Disk {n} from {A} to {C}")
    tower_of_hanoi(n-1,B,A,C)

if __name__=="__main__":
    print("Enter the Total No. of Disks:")
    n=int(input())
    A=1 # source disk
    B=2 # Auxillary disk
    C=3 # destination disk
    tower_of_hanoi(n,A,B,C)
output: 
Enter the Total No. of Disks:
3
Move Disk 1 from 1 to 3
Move Disk 2 from 1 to 2
Move Disk 1 from 3 to 2
Move Disk 3 from 1 to 3
Move Disk 1 from 2 to 1
Move Disk 2 from 2 to 3
Move Disk 1 from 1 to 3
*********************************************************************


SORTING:
def bubble_sort(arr):
    """
    Bubble Sort: Compare adjacent elements and swap them if they are in the wrong order.
    """
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:   
                arr[j], arr[j+1] = arr[j+1], arr[j]

def selection_sort(arr):
    """
    Selection Sort: Find the minimum element from the unsorted portion and swap it with the first element.
    """
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]

def insertion_sort(arr):
    """
    Insertion Sort: Build the sorted array one element at a time by repeatedly inserting the next element
    into the sorted portion of the array.
    """
    n = len(arr)
    for i in range(1, n):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

def sort_switch(choice, arr):
    """
    Switch case to choose the sorting algorithm based on user input.
    """
    if choice == 1:
        bubble_sort(arr)
    elif choice == 2:
        selection_sort(arr)
    elif choice == 3:
        insertion_sort(arr)
    else:
        print("Invalid choice. Please choose between 1, 2, or 3.")

# Prompt the user to enter the total number of elements they want to add to the array
n = int(input("Enter the total number of elements: "))

# Take input for each element and append it to the array
arr = []
for i in range(n):
    arr.append(int(input(f"Enter element {i+1}: ")))

print("Original Array:", arr)

# Prompt the user to choose a sorting algorithm
print("Choose a sorting algorithm:")
print("1. Bubble Sort")
print("2. Selection Sort")
print("3. Insertion Sort")

choice = int(input("Enter your choice (1, 2, or 3): "))

sort_switch(choice, arr)
print("Sorted Array:", arr)


output:
Original Array: [64, 34, 25, 12, 22, 11, 90]
Choose a sorting algorithm:
1. Bubble Sort
2. Selection Sort
3. Insertion Sort
Enter your choice (1, 2, or 3): 1
Sorted Array: [11, 12, 22, 25, 34, 64, 90]

Original Array: [64, 34, 25, 12, 22, 11, 90]
Choose a sorting algorithm:
1. Bubble Sort
2. Selection Sort
3. Insertion Sort
Enter your choice (1, 2, or 3): 2
Sorted Array: [11, 12, 22, 25, 34, 64, 90]

Original Array: [64, 34, 25, 12, 22, 11, 90]
Choose a sorting algorithm:
1. Bubble Sort
2. Selection Sort
3. Insertion Sort
Enter your choice (1, 2, or 3): 2
Sorted Array: [11, 12, 22, 25, 34, 64, 90]


********************************************************************************************************************


TIC TAC TOE

import random

def PrintBoard(xState,oState):
    zero="X" if xState[0] else ("O" if oState[0] else 0)
    one="X" if xState[1] else ("O" if oState[1] else 1)
    two="X" if xState[2] else ("O" if oState[2] else 2)
    three="X" if xState[3] else ("O" if oState[3] else 3)
    four="X" if xState[4] else ("O" if oState[4] else 4)
    five="X" if xState[5] else ("O" if oState[5] else 5)
    six="X" if xState[6] else ("O" if oState[6] else 6)
    seven="X" if xState[7] else ("O" if oState[7] else 7)
    eight="X" if xState[8] else ("O" if oState[8] else 8)
    print(f" {zero} | {one} | {two} ")
    print(f"---|---|---")
    print(f" {three} | {four} | {five} ")
    print(f"---|---|---")
    print(f" {six} | {seven} | {eight} ")

def sum(a,b,c):
    return a+b+c
def CheckWin(xState,oState):
    wins=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]
    for win in wins:
        if(sum(xState[win[0]],xState[win[1]],xState[win[2]])==3):
            print("Hurray!!,X Won the Match!!")
            return 1
        if(sum(oState[win[0]],oState[win[1]],oState[win[2]])==3):
            print("Hurray!!,O Won the Match!!")
            return 0
    return -1
print("Welcome to Tic Tac Toe Game!!")
xState=[0,0,0,0,0,0,0,0,0]
oState=[0,0,0,0,0,0,0,0,0]
turn=1#turn of X
while(True):
    PrintBoard(xState,oState)
    if(turn==1):
        print("Chance Of X:")
        value=int(input("Please Enter the Number:"))
        xState[value]=1
    else:
        print("Computer's Chance:")
        value = random.randint(0,8)
        while xState[value] != oState[value]:
            value = random.randint(0, 8)
        oState[value] = 1
    cwin=CheckWin(xState,oState)
    if(cwin!=-1):
        PrintBoard(xState, oState)
        print("Match Over!!")
        break
    turn=1-turn

****************************************************************************************************************************
NLTK:

-!pip install nltk
-import nltk
-nltk.download("punkt")   
-nltk.download("stopwords")
-from nltk import sent_tokenize, word_tokenize
-from nltk.corpus import stopwords
-stopwords = stopwords.words("english")
-sent = "I will walk 500 miles and I would walk 500 more , just to be the man who walks a thousand miles to fall down at your door"
-words = word_tokenize(sent)
print(words)
-sentences = sent_tokenize(sent)
print(sentences)
-print(stopwords)
-for word in words:
    if word in stopwords:
        words.remove(word)
print(words)
-from nltk import PorterStemmer
-stemmer = PorterStemmer()
-print(words)
-stemmed_words = [stemmer.stem(word) for word in words]
print(stemmed_words)
-from collections import Counter
from nltk import pos_tag
-nltk.download('averaged_perceptron_tagger')
-count_dict = {}

for word in stemmed_words:
    if word in count_dict:
        count_dict[word] += 1
    else:
        count_dict[word] = 1

print(count_dict)
-pos_tagged = pos_tag(stemmed_words)
print(pos_tagged)
-count = Counter(tag for _ , tag in pos_tagged)
print(count)


***********************************************************************************************************************************************
A******

#include <iostream>
#include <vector>
#include <queue>
#include <set>
using namespace std;

struct state
{
    vector<vector<int>> puzzle;
    int cost, level , h;
};

vector<vector<int>> puzzle = {
    {2, 8, 3},
    {1, 6, 4},
    {7, 0, 5}};

vector<vector<int>> finalState = {
    {1, 2, 3},
    {8, 0, 4},
    {7, 6, 5} // consider 0 as empty tile
};

int fscore(const vector<vector<int>> &currState)
{
    int h = 0;
    for (int i = 0; i < currState.size(); i++)
    {
        for (int j = 0; j < currState[0].size(); j++)
        {
            if (currState[i][j] != finalState[i][j])
            {
                h++;
            }
        }
    }
    return h;
}

state CalculatFscore(state temp)
{
    int cost = fscore(temp.puzzle);
    temp.level++;
    temp.h = cost;
    temp.cost = cost==0 ? 0 : cost + temp.level;
    return temp;
}

struct CompareState
{
    bool operator()(const state &s1, const state &s2)
    {
        if (s1.cost == s2.cost)
        {
            return s1.level > s2.level;
        }
        return s1.cost > s2.cost;
    }
};

vector<int> locateZero(state curr)
{
    vector<int> v;
    for (int x = 0; x < 3; x++)
    {
        for (int y = 0; y < 3; y++)
        {
            // cout << "x: " << x << ", y: " << y << " [x][y]= "<< curr.puzzle[x][y]<< endl;

            if (curr.puzzle[x][y] == 0)
            {
                v.push_back(x);
                v.push_back(y);
                return v;
            }
        }
    }
    return {0, 0};
}

void display(state curr)
{
    for (int x = 0; x < 3; x++)
    {
        for (int y = 0; y < 3; y++)
        {
            cout << curr.puzzle[x][y] << " ";
        }
        cout << endl;
    }

    cout << "h : " << curr.h << endl;
    cout << "level : " << curr.level << endl;
    cout << "cost : " << curr.cost << endl;
    cout<< endl;
}

void solve()
{
    state initial;
    set<vector<vector<int>>> st;
    initial.puzzle = puzzle;
    initial.cost = fscore(initial.puzzle);
    initial.h = fscore(initial.puzzle);
    initial.level = 0;

    priority_queue<state, vector<state>, CompareState> pq;
    pq.push(initial);

    while (!pq.empty())
    {
        state curr = pq.top();

        display(curr);
        if (curr.cost == 0)
        {
            cout << "done" << endl;
            return;
            // break;
        }
        pq.pop();

        // find pos of empty space
        vector<int> pos = locateZero(curr);
        int x = pos[0];
        int y = pos[1];

        // move empty space up
        if (x > 0)
        {
            state temp = curr; // temp copy
            int val = temp.puzzle[x - 1][y];
            temp.puzzle[x - 1][y] = 0;
            temp.puzzle[x][y] = val;
            temp = CalculatFscore(temp);
            if (st.find(temp.puzzle) == st.end())
            {
                pq.push(temp);
            }
            // cout << "x: " << x << ", y: " << y << endl;
        }

        if (x < 2)
        {
            state temp = curr;
            int val = temp.puzzle[x + 1][y];
            temp.puzzle[x + 1][y] = 0;
            temp.puzzle[x][y] = val;

            temp = CalculatFscore(temp);
            if (st.find(temp.puzzle) == st.end())
            {
                pq.push(temp);
            }
        }

        if (y > 0)
        {
            state temp = curr;
            int val = temp.puzzle[x][y - 1];
            temp.puzzle[x][y - 1] = 0;
            temp.puzzle[x][y] = val;

            temp = CalculatFscore(temp);
            if (st.find(temp.puzzle) == st.end())
            {
                pq.push(temp);
            }
        }

        if (y < 2)
        {
            state temp = curr;
            int val = temp.puzzle[x][y + 1];
            temp.puzzle[x][y + 1] = 0;
            temp.puzzle[x][y] = val;

            temp = CalculatFscore(temp);
            if (st.find(temp.puzzle) == st.end())
            {
                pq.push(temp);
            }
        }
    }
    cout << "succeeded";
}

int main()
{

    cout<<"give positions for puzzle"<<endl;
    for (int i = 0; i < 3; i++)
    {
        for(int j = 0; j < 3; j++){
            cout<< "enter the value : "<<endl;
            cin>> puzzle[i][j];
        }
    }
    
    cout<<"give positions for final State"<<endl;
    for (int i = 0; i < 3; i++)
    {
        for(int j = 0; j < 3; j++){
            cout<< "enter the value : "<<endl;
            cin>> finalState[i][j];
        }
    }

    solve();

    //cout << fscore(puzzle);
    return 0;
}

*************************************************************************************************************************************
class Node:
    def __init__(self,data,level,fval):
        """ Initialize the node with the data, level of the node and the calculated fvalue """
        self.data = data
        self.level = level
        self.fval = fval

    def generate_child(self):
        """ Generate child nodes from the given node by moving the blank space
            either in the four directions {up,down,left,right} """
        x,y = self.find(self.data,'_')
        """ val_list contains position values for moving the blank space in either of
            the 4 directions [up,down,left,right] respectively. """
        val_list = [[x,y-1],[x,y+1],[x-1,y],[x+1,y]]
        children = []
        for i in val_list:
            child = self.shuffle(self.data,x,y,i[0],i[1])
            if child is not None:
                child_node = Node(child,self.level+1,0)
                children.append(child_node)
        return children
        
    def shuffle(self,puz,x1,y1,x2,y2):
        """ Move the blank space in the given direction and if the position value are out
            of limits the return None """
        if x2 >= 0 and x2 < len(self.data) and y2 >= 0 and y2 < len(self.data):
            temp_puz = []
            temp_puz = self.copy(puz)
            temp = temp_puz[x2][y2]
            temp_puz[x2][y2] = temp_puz[x1][y1]
            temp_puz[x1][y1] = temp
            return temp_puz
        else:
            return None
            

    def copy(self,root):
        """ Copy function to create a similar matrix of the given node"""
        temp = []
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp    
            
    def find(self,puz,x):
        """ Specifically used to find the position of the blank space """
        for i in range(0,len(self.data)):
            for j in range(0,len(self.data)):
                if puz[i][j] == x:
                    return i,j


class Puzzle:
    def __init__(self,size):
        """ Initialize the puzzle size by the specified size,open and closed lists to empty """
        self.n = size
        self.open = []
        self.closed = []

    def accept(self):
        """ Accepts the puzzle from the user """
        puz = []
        for i in range(0,self.n):
            temp = input().split(" ")
            puz.append(temp)
        return puz

    def f(self,start,goal):
        """ Heuristic Function to calculate hueristic value f(x) = h(x) + g(x) """
        return self.h(start.data,goal)+start.level

    def h(self,start,goal):
        """ Calculates the different between the given puzzles """
        temp = 0
        for i in range(0,self.n):
            for j in range(0,self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp
        

    def process(self):
        """ Accept Start and Goal Puzzle state"""
        print("Enter the start state matrix \n")
        start = self.accept()
        print("Enter the goal state matrix \n")        
        goal = self.accept()

        start = Node(start,0,0)
        start.fval = self.f(start,goal)
        """ Put the start node in the open list"""
        self.open.append(start)
        print("\n\n")
        while True:
            cur = self.open[0]
            print("")
            print("  | ")
            print("  | ")
            print(" \\\'/ \n")
            for i in cur.data:
                for j in i:
                    print(j,end=" ")
                print("")
            """ If the difference between current and goal node is 0 we have reached the goal node"""
            if(self.h(cur.data,goal) == 0):
                break
            for i in cur.generate_child():
                i.fval = self.f(i,goal)
                self.open.append(i)
            self.closed.append(cur)
            del self.open[0]

            """ sort the opne list based on f value """
            self.open.sort(key = lambda x:x.fval,reverse=False)


puz = Puzzle(3)
puz.process()


OUTPUT:
Enter the start state matrix

4 1 5
  0 6
9 2 8
Enter the goal state matrix 

4 1 5
9 0 6
  2 8




  | 
  | 
 \'/ 

4 1 5 
  0 6 
9 2 8 














